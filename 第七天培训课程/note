Python中的I/O流：
1.创建File对象
2.指定打开的文件与方式
3.读写操作
4.关闭File对象
打开文件的方式：
r:只读，指针在开头，文件不存在会报错
w:只写，只要使用了就会覆盖原文件
a:追加写，指针在结尾
b:二进制
+:可读可写
----------------------------
序列化：
Serialization,将内存中的对象存进硬盘中，把对象转为
一个一个的字节，二进制形式
反序列化：
deSerialization,将文件中的一个一个字节转换到内存中
------
使用pickle库实现
pickle.dump(obj,file) 序列化
pickle.load(file)  反序列化

序列化也是写操作，只是写的是二进制形式
-------------
如何存储多个用户信息？
用户信息用一个字典存储， dic = {userName:111,userPsw:aaa}
所有用户用列表存储 list = [dic1,dic2,dic3....]
每次新建用户，要更新list，再做一次序列化，把原来的覆盖掉
如果仅仅是登录信息  dic = {tyy:123,xiaoming:222}
-----------
尝试完成登录注册功能
--------------
Python中的异常:
异常是一个事件，该事件会在程序执行过程中发生，
影响程序的正常执行，一般情况下，Python无法正常处理
程序时就会发生一个异常。
异常也是一个Python对象，表示一个错误，当Python脚本
发生异常时，需要捕获它，否则程序会终止。

异常的处理:
try/except语句
让程序检测try中的语句，在except里捕获异常并处理

try/except还有一个可选的else子句
else如果使用必须放在所有的except后面
当没有异常发生时，执行else中的语句
使用else比把所有代码都放在try中更好







